
labs-avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a35  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b6  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057a  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041f  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029c  00000000  00000000  00001f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002207  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 81 00 	call	0x102	; 0x102 <main>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_17>:
//---------------------------------------------------------------------------------------------------------------------

uint8_t portx_state;

ISR(SPI_STC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	switch(portx_state)
  a0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <portx_state>
  a4:	e4 30       	cpi	r30, 0x04	; 4
  a6:	18 f4       	brcc	.+6      	; 0xae <__vector_17+0x1e>
  a8:	e1 30       	cpi	r30, 0x01	; 1
  aa:	20 f0       	brcs	.+8      	; 0xb4 <__vector_17+0x24>
  ac:	06 c0       	rjmp	.+12     	; 0xba <__vector_17+0x2a>
  ae:	e4 30       	cpi	r30, 0x04	; 4
  b0:	51 f0       	breq	.+20     	; 0xc6 <__vector_17+0x36>
  b2:	16 c0       	rjmp	.+44     	; 0xe0 <__vector_17+0x50>
	{
		case 0: PINX = SPDR;
  b4:	8e b5       	in	r24, 0x2e	; 46
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		case 1: case 2: case 3: SPDR = PORTY[portx_state]; break;
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	ed 5f       	subi	r30, 0xFD	; 253
  be:	fe 4f       	sbci	r31, 0xFE	; 254
  c0:	80 81       	ld	r24, Z
  c2:	8e bd       	out	0x2e, r24	; 46
  c4:	0d c0       	rjmp	.+26     	; 0xe0 <__vector_17+0x50>
		case 4: PORTB |= (1 << SPI_CS); _delay_us(1); PORTB &= ~(1 << SPI_CS); SPDR = PORTX;
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <__vector_17+0x3e>
  d2:	00 00       	nop
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	85 b9       	out	0x05, r24	; 5
  da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PORTX>
  de:	8e bd       	out	0x2e, r24	; 46
	}
	
	portx_state++;
  e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <portx_state>
  e4:	8f 5f       	subi	r24, 0xFF	; 255
  e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <portx_state>
	if(portx_state > 4) { portx_state = 0; }
  ea:	85 30       	cpi	r24, 0x05	; 5
  ec:	10 f0       	brcs	.+4      	; 0xf2 <__vector_17+0x62>
  ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <portx_state>
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:

int main(void)
{
  uint8_t value = 0;
  
  PORTD = 0x0C;
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	8b b9       	out	0x0b, r24	; 11
  PORTB = ~value; DDRB = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	85 b9       	out	0x05, r24	; 5
 10a:	84 b9       	out	0x04, r24	; 4
  
  EIMSK |= (1 << INT0); // External interrupt 0
 10c:	8d b3       	in	r24, 0x1d	; 29
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8d bb       	out	0x1d, r24	; 29
  EICRA |= (1 << ISC01) || ( 1 << ISC00 ); // Falling & rising edge
 112:	e9 e6       	ldi	r30, 0x69	; 105
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
  sei();
 11c:	78 94       	sei

uint8_t ecr_left_right;

int main(void)
{
  uint8_t value = 0;
 11e:	90 e0       	ldi	r25, 0x00	; 0
  EICRA |= (1 << ISC01) || ( 1 << ISC00 ); // Falling & rising edge
  sei();
  
  while (1)
  {    
    if((ecr_left_right == ECR_LEFT) && (value != 0)) {
 120:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ecr_left_right>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	31 f4       	brne	.+12     	; 0x134 <main+0x32>
 128:	99 23       	and	r25, r25
 12a:	21 f0       	breq	.+8      	; 0x134 <main+0x32>
      value--;
 12c:	91 50       	subi	r25, 0x01	; 1
      ecr_left_right = 0;
 12e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ecr_left_right>
 132:	07 c0       	rjmp	.+14     	; 0x142 <main+0x40>
    } else if((ecr_left_right == ECR_RIGHT) && (value != 255)) {
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	29 f4       	brne	.+10     	; 0x142 <main+0x40>
 138:	9f 3f       	cpi	r25, 0xFF	; 255
 13a:	19 f0       	breq	.+6      	; 0x142 <main+0x40>
      value++;
 13c:	9f 5f       	subi	r25, 0xFF	; 255
      ecr_left_right = 0;
 13e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ecr_left_right>
    }
    PORTB = ~value;
 142:	89 2f       	mov	r24, r25
 144:	80 95       	com	r24
 146:	85 b9       	out	0x05, r24	; 5
  }
 148:	eb cf       	rjmp	.-42     	; 0x120 <main+0x1e>

0000014a <__vector_1>:
}

ISR(INT0_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
  uint8_t state = (~PIND >> 2) & 3;
 158:	89 b1       	in	r24, 0x09	; 9
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	80 95       	com	r24
 15e:	90 95       	com	r25
 160:	95 95       	asr	r25
 162:	87 95       	ror	r24
 164:	95 95       	asr	r25
 166:	87 95       	ror	r24
 168:	83 70       	andi	r24, 0x03	; 3
  if((state == 1)||(state == 2)) { ecr_left_right = ECR_RIGHT; }
 16a:	9f ef       	ldi	r25, 0xFF	; 255
 16c:	98 0f       	add	r25, r24
 16e:	92 30       	cpi	r25, 0x02	; 2
 170:	20 f4       	brcc	.+8      	; 0x17a <__vector_1+0x30>
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ecr_left_right>
 178:	07 c0       	rjmp	.+14     	; 0x188 <__vector_1+0x3e>
  else if ((state == 0)||(state == 3)) { ecr_left_right = ECR_LEFT; }
 17a:	88 23       	and	r24, r24
 17c:	11 f0       	breq	.+4      	; 0x182 <__vector_1+0x38>
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	19 f4       	brne	.+6      	; 0x188 <__vector_1+0x3e>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ecr_left_right>
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
